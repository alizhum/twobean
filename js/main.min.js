
document.addEventListener('DOMContentLoaded', () => {

  const navToggle = document.getElementById('nav-toggle');
  const header = document.getElementById('header');
  const headerMobile = document.getElementById('header-mobile');
  const faqItems = document.querySelectorAll('.faq__item-toggle');
  const tabButtons = document.querySelectorAll('.tab__button');
  

  if( tabButtons ) {

    tabButtons.forEach(function(button) {
  
      button.addEventListener('click', function() {
  
        if( this.classList.contains('tab__button--active') ) return;
  
        const tab = this.closest('.tab');
        const contentID = this.dataset.content;
        const activeContent = tab.querySelector('.tab__content--active');
        const activeButton = tab.querySelector('.tab__button--active');
        const contentToActive = document.getElementById(contentID);
  
        if( contentToActive ) {
  
          if( activeContent ) {
            activeContent.classList.remove('tab__content--active');
            activeButton.classList.remove('tab__button--active');
          }
    
          this.classList.add('tab__button--active');
          contentToActive.classList.add('tab__content--active');
  
          if( this.closest('.checkout__option') ) {
            moveCheckoutOptions();
          }
  
        }
  
      });
    });
  
  }

  navToggle.addEventListener('click', function() {
  
    header.classList.toggle('header--nav-active');
    this.classList.toggle('header__nav-toggle--active');
    headerMobile.classList.toggle('header__mobile--active');
    document.body.classList.toggle('overflow-hidden');
  
  
  });


  document.body.addEventListener('click', (event) => {
    if (event.target.classList.contains('product-card__qty-button--decrease') || event.target.classList.contains('product-card__qty-button--increase')) {
        const button = event.target;
        const qtyContainer = button.closest('.product-card__qty');
        const quantityInput = qtyContainer.querySelector('.product-card__qty-input');
        let currentValue = parseInt(quantityInput.value);
        
        if (button.classList.contains('product-card__qty-button--decrease')) {
            if (currentValue > 1) {
                quantityInput.value = currentValue - 1;
            }
        }

        if (button.classList.contains('product-card__qty-button--increase')) {
            quantityInput.value = currentValue + 1;
        }
    }
});

faqItems.forEach(function(item) {
    item.addEventListener('click', function(e) {
  
      e.preventDefault();
  
      const container = this.closest('.faq');
      const otherItems = container.querySelectorAll('.faq__item--active');
      const parent = this.closest('.faq__item');
      
      parent.classList.toggle('faq__item--active');
      parent.querySelector('.faq__item-content').slideToggle(300);
  
      if( otherItems ) {
        otherItems.forEach(function(elem) {
          elem.querySelector('.faq__item-content').slideToggle(300);
          elem.classList.remove('faq__item--active');
        });
      }
  
  
    });
  });


});

// SLIDERS START

var productDetailThumbsSlider = new Swiper ('.product-detail__slider-thumbs', {
  loop: true,
  spaceBetween: 10,
  slideToClickedSlide: true,
  slidesPerView: 3,
  breakpoints: {
    830: {
      spaceBetween: 20
    },
  }
});

const productDetailSlider = new Swiper ('.product-detail__slider', {
  loop: true,
  spaceBetween: 20,
  thumbs: {
      swiper: productDetailThumbsSlider,
  },
});


var relatedSlider = new Swiper ('.product__related-slider', {
  spaceBetween: 20,
  slidesPerView: 3,
  breakpoints: {
    0: {
      slidesPerView: 'auto',
      spaceBetween: 20,
    },
    1200: {
      spaceBetween: 40
    },
  }
});


// SLIDERS END

// Slide Toggle Vanilla JS
HTMLElement.prototype.slideToggle = function(duration, callback) {
    if (this.clientHeight === 0) {
      _s(this, duration, callback, true);
    } else {
      _s(this, duration, callback);
    }
  };
  
  function _s(el, duration, callback, isDown) {
    
    if (typeof duration === 'undefined') duration = 400;
    if (typeof isDown === 'undefined') isDown = false;
  
    el.style.overflow = "hidden";
    if (isDown) el.style.display = "block";
  
    var elStyles        = window.getComputedStyle(el);
  
    var elHeight        = parseFloat(elStyles.getPropertyValue('height'));
    var elPaddingTop    = parseFloat(elStyles.getPropertyValue('padding-top'));
    var elPaddingBottom = parseFloat(elStyles.getPropertyValue('padding-bottom'));
    var elMarginTop     = parseFloat(elStyles.getPropertyValue('margin-top'));
    var elMarginBottom  = parseFloat(elStyles.getPropertyValue('margin-bottom'));
  
    var stepHeight        = elHeight        / duration;
    var stepPaddingTop    = elPaddingTop    / duration;
    var stepPaddingBottom = elPaddingBottom / duration;
    var stepMarginTop     = elMarginTop     / duration;
    var stepMarginBottom  = elMarginBottom  / duration;
  
    var start;
  
    function step(timestamp) {
  
      if (start === undefined) start = timestamp;
  
      var elapsed = timestamp - start;
  
      if (isDown) {
        el.style.height        = (stepHeight        * elapsed) + "px";
        el.style.paddingTop    = (stepPaddingTop    * elapsed) + "px";
        el.style.paddingBottom = (stepPaddingBottom * elapsed) + "px";
        el.style.marginTop     = (stepMarginTop     * elapsed) + "px";
        el.style.marginBottom  = (stepMarginBottom  * elapsed) + "px";
      } else {
        el.style.height        = elHeight        - (stepHeight        * elapsed) + "px";
        el.style.paddingTop    = elPaddingTop    - (stepPaddingTop    * elapsed) + "px";
        el.style.paddingBottom = elPaddingBottom - (stepPaddingBottom * elapsed) + "px";
        el.style.marginTop     = elMarginTop     - (stepMarginTop     * elapsed) + "px";
        el.style.marginBottom  = elMarginBottom  - (stepMarginBottom  * elapsed) + "px";
      }
  
      if (elapsed >= duration) {
        el.style.height        = "";
        el.style.paddingTop    = "";
        el.style.paddingBottom = "";
        el.style.marginTop     = "";
        el.style.marginBottom  = "";
        el.style.overflow      = "";
        if (!isDown) el.style.display = "none";
        if (typeof callback === 'function') callback();
      } else {
        window.requestAnimationFrame(step);
      }
    }
  
    window.requestAnimationFrame(step);
  }
  