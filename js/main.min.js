document.addEventListener('DOMContentLoaded', () => {
  const navToggle = document.getElementById('nav-toggle');
  const header = document.getElementById('header');
  const headerMobile = document.getElementById('header-mobile');
  const orderCardToggleButtons = document.querySelectorAll('.order-card__toggle');

  modalInit();
  faqInit();
  tabsInit();

  if (orderCardToggleButtons) {
    orderCardToggleButtons.forEach((button) => {
      button.addEventListener('click', function() {
        const card = this.closest('.order-card');
        card.querySelector('.order-card__meta').slideToggle();
        card.classList.toggle('order-card--toggled');
      });
    });
  }

  navToggle.addEventListener('click', function() {
    header.classList.toggle('header--nav-active');
    this.classList.toggle('header__nav-toggle--active');
    headerMobile.classList.toggle('header__mobile--active');
    document.body.classList.toggle('overflow-hidden');
    
  });

  // Quantity
  document.body.addEventListener('click', (event) => {
    if (event.target.classList.contains('quantity__button--decrease') || event.target.classList.contains('quantity__button--increase')) {
      const button = event.target;
      const qtyContainer = button.closest('.quantity');
      const quantityInput = qtyContainer.querySelector('.quantity__input');
      let currentValue = parseInt(quantityInput.value);

      if (button.classList.contains('quantity__button--decrease')) {
        if (currentValue > 1) {
          quantityInput.value = currentValue - 1;
        }
      }

      if (button.classList.contains('quantity__button--increase')) {
        quantityInput.value = currentValue + 1;
      }
    }
  });

  // Sliders Initialization
  const productDetailThumbsSlider = new Swiper('.product-detail__slider-thumbs', {
    loop: true,
    spaceBetween: 10,
    slideToClickedSlide: true,
    slidesPerView: 3,
    breakpoints: {
      830: {
        spaceBetween: 20,
      },
    },
  });

  const productDetailSlider = new Swiper('.product-detail__slider', {
    loop: true,
    spaceBetween: 20,
    thumbs: {
      swiper: productDetailThumbsSlider,
    },
  });

  const relatedSlider = new Swiper('.product__related-slider', {
    spaceBetween: 20,
    slidesPerView: 3,
    breakpoints: {
      0: {
        slidesPerView: 'auto',
        spaceBetween: 20,
      },
      1200: {
        spaceBetween: 40,
      },
    },
  });

  // Functions 

  // FAQ Initialization
  function faqInit() {
    const faqItems = document?.querySelectorAll('.faq__item-toggle');

    faqItems.forEach((item) => {
      item.addEventListener('click', function(e) {
        e.preventDefault();

        const container = this.closest('.faq');
        const otherItems = container.querySelectorAll('.faq__item--active');
        const parent = this.closest('.faq__item');
        const content = parent.querySelector('.faq__item-content');

        parent.classList.toggle('faq__item--active');
        content.slideToggle(300);

        if (otherItems) {
          otherItems.forEach((elem) => {
            elem.querySelector('.faq__item-content').slideToggle(300);
            elem.classList.remove('faq__item--active');
          });
        }
      });
    });
  }

  // Modal
  function modalInit() {
    const openModal = document.querySelectorAll('.open-modal');
    const modalClose = document.querySelectorAll('.modal__close');
  
    if (openModal) {
      openModal.forEach(function(button) {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          const modalId = button.dataset.id;
          const modal = document.getElementById(modalId);
  
          if (modal) {
            closeAllModals(); // Закрываем все открытые модалки
  
            document.body.classList.add('overflow-hidden');
            modal.classList.add('modal--active');
  
            if (button.dataset.id == 'mentor-preview') {
              const card = button.closest('.mentor-card');
              if (card) {
                fillMentorPreviewModal(card);
              }
            }
          }
        });
      });
    }
  
    if (modalClose) {
      modalClose.forEach(function(button) {
        button.addEventListener('click', function() {
          this.closest('.modal').classList.remove('modal--active');
          if (!document.querySelector('.modal--active')) {
            document.body.classList.remove('overflow-hidden');
          }
        });
      });
    }
  
    // Закрытие модалки при клике вне её
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('modal') && e.target.classList.contains('modal--active')) {
        e.target.classList.remove('modal--active');
        if (!document.querySelector('.modal--active') && !document.querySelector('.header--nav-active')) {
          document.body.classList.remove('overflow-hidden');
        }
      }
    });
  
    // Функция закрытия всех модалок
    function closeAllModals() {
      const activeModals = document.querySelectorAll('.modal.modal--active');
      activeModals.forEach(function(modal) {
        modal.classList.remove('modal--active');
      });
      if( document.querySelector('.header--nav-active') ) return;
      document.body.classList.remove('overflow-hidden');
    }
  }

  // Tabs
  function tabsInit() {

    const tabButtons = document.querySelectorAll('.tab__button');

    tabButtons?.forEach(function(button) {

      button.addEventListener('click', function() {
    
        if( this.classList.contains('tab__button--active') ) return;
    
        const tab = this.closest('.tab');
        const contentID = this.dataset.content;
        const activeContent = tab.querySelector('.tab__content--active');
        const activeButton = tab.querySelector('.tab__button--active');
        const contentToActive = document.getElementById(contentID);
        
    
        if( contentToActive ) {
    
          activeContent.classList.remove('tab__content--active');
          activeButton.classList.remove('tab__button--active');
    
          this.classList.add('tab__button--active');
          contentToActive.classList.add('tab__content--active');
    
        }
    
      });
    });
  }


  // Slide Toggle Vanilla JS
  HTMLElement.prototype.slideToggle = function(duration, callback) {
    if (this.clientHeight === 0) {
      _s(this, duration, callback, true);
    } else {
      _s(this, duration, callback);
    }
  };

  function _s(el, duration, callback, isDown) {
    if (typeof duration === 'undefined') duration = 400;
    if (typeof isDown === 'undefined') isDown = false;

    el.style.overflow = "hidden";
    if (isDown) el.style.display = "flex";

    const elStyles = window.getComputedStyle(el);
    const elHeight = parseFloat(elStyles.getPropertyValue('height'));
    const elPaddingTop = parseFloat(elStyles.getPropertyValue('padding-top'));
    const elPaddingBottom = parseFloat(elStyles.getPropertyValue('padding-bottom'));
    const elMarginTop = parseFloat(elStyles.getPropertyValue('margin-top'));
    const elMarginBottom = parseFloat(elStyles.getPropertyValue('margin-bottom'));

    const stepHeight = elHeight / duration;
    const stepPaddingTop = elPaddingTop / duration;
    const stepPaddingBottom = elPaddingBottom / duration;
    const stepMarginTop = elMarginTop / duration;
    const stepMarginBottom = elMarginBottom / duration;

    let start;

    function step(timestamp) {
      if (start === undefined) start = timestamp;

      const elapsed = timestamp - start;

      if (isDown) {
        el.style.height = (stepHeight * elapsed) + "px";
        el.style.paddingTop = (stepPaddingTop * elapsed) + "px";
        el.style.paddingBottom = (stepPaddingBottom * elapsed) + "px";
        el.style.marginTop = (stepMarginTop * elapsed) + "px";
        el.style.marginBottom = (stepMarginBottom * elapsed) + "px";
      } else {
        el.style.height = elHeight - (stepHeight * elapsed) + "px";
        el.style.paddingTop = elPaddingTop - (stepPaddingTop * elapsed) + "px";
        el.style.paddingBottom = elPaddingBottom - (stepPaddingBottom * elapsed) + "px";
        el.style.marginTop = elMarginTop - (stepMarginTop * elapsed) + "px";
        el.style.marginBottom = elMarginBottom - (stepMarginBottom * elapsed) + "px";
      }

      if (elapsed >= duration) {
        el.style.height = "";
        el.style.paddingTop = "";
        el.style.paddingBottom = "";
        el.style.marginTop = "";
        el.style.marginBottom = "";
        el.style.overflow = "";
        if (!isDown) el.style.display = "none";
        if (typeof callback === 'function') callback();
      } else {
        window.requestAnimationFrame(step);
      }
    }

    window.requestAnimationFrame(step);
  }
});
